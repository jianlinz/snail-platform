<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="10 seconds">
    <springProperty scope="context" name="sp.log.file-path" source="sp.log.file-path" defaultValue="/opt/logs"/>
    <springProperty scope="context" name="sp.log.file-format" source="sp.log.file-format" defaultValue="text"/>
    <springProperty scope="context" name="sp.log.email.enable" source="sp.log.email.enable" defaultValue="false"/>
    <springProperty scope="context" name="applicationName" source="spring.application.name"/>
    <springProperty scope="context" name="ipAddress" source="spring.cloud.client.ip-address" defaultValue="0.0.0.0"/>

    <include resource="logback-sql.xml"/>
    <include resource="logback-error-log.xml"/>

    <contextName>logback</contextName>
    <!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx} }  "/>


    <!--开发,单元测试,log环境输出到控制台-->
    <springProfile name="dev,test,log">
        <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
            <filter class="indi.jl.sp.log.filter.DispatcherServletErrorFilter"></filter>
            <encoder>
                <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
                <charset>UTF-8</charset>
            </encoder>
        </appender>
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>

    <!--集成,测试,生产,log环境异步输出到文件-->
    <springProfile name="ci,cd,pd,log">
        <if condition='property("sp.log.file-format").contains("json")'>
            <then>
                <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
                    <filter class="indi.jl.sp.log.filter.DispatcherServletErrorFilter"></filter>
                    <file>${sp.log.file-path}/log.log</file>
                    <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                        <providers class="net.logstash.logback.composite.loggingevent.LoggingEventJsonProviders">
                            <pattern>
                                <pattern>
                                    {
                                    "date":"%d{yyyy-MM-dd HH:mm:ss.SSS}",
                                    "level":"%level",
                                    "ip":"${ipAddress}",
                                    "appName":"${applicationName}",
                                    "traceId":"%X{X-B3-TraceId:-}",
                                    "spanId":"%X{X-B3-SpanId:-}",
                                    "thread":"%thread",
                                    "message":"[%d{yyyy-MM-dd HH:mm:ss.SSS}] [${applicationName}- %X{X-B3-TraceId:-}] [%thread] [%-5level] -%logger{50} -%msg%n -%exception"
                                    }
                                </pattern>
                            </pattern>
                        </providers>
                    </encoder>
                    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                        <!-- 日志归档 -->
                        <fileNamePattern>${sp.log.file-path}/backup/log-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
                        <timeBasedFileNamingAndTriggeringPolicy
                                class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                            <maxFileSize>100MB</maxFileSize>
                        </timeBasedFileNamingAndTriggeringPolicy>
                        <!--日志文件保留天数-->
                        <maxHistory>15</maxHistory>
                    </rollingPolicy>
                </appender>
            </then>
            <else>
                <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
                    <filter class="indi.jl.sp.log.filter.DispatcherServletErrorFilter"></filter>
                    <file>${sp.log.file-path}/log.log</file>
                    <encoder>
                        <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] [LogLevel-%-5level] -%logger{50} - %msg%n
                        </pattern>
                        <charset>UTF-8</charset>
                    </encoder>
                    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                        <!-- 日志归档 -->
                        <fileNamePattern>${sp.log.file-path}/backup/log-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
                        <timeBasedFileNamingAndTriggeringPolicy
                                class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                            <maxFileSize>100MB</maxFileSize>
                        </timeBasedFileNamingAndTriggeringPolicy>
                        <!--日志文件保留天数-->
                        <maxHistory>15</maxHistory>
                    </rollingPolicy>
                </appender>
            </else>
        </if>
        <appender name="ASYNC-FILE" class="ch.qos.logback.classic.AsyncAppender">
            <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
            <discardingThreshold>0</discardingThreshold>
            <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
            <queueSize>512</queueSize>
            <appender-ref ref="FILE"/>
        </appender>
        <root level="INFO">
            <appender-ref ref="ASYNC-FILE"/>
            <if condition='property("sp.log.email.enable").contains("true")'>
                <then>
                    <appender-ref ref="ASYNC-EMAIL"/>
                </then>
            </if>
        </root>
    </springProfile>
</configuration>